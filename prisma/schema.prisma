generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(uuid())
  firstName   String
  lastName    String
  username    String    @unique
  email       String    @unique
  phoneNumber String    @unique
  password    String
  addresses   Address[]
  createdAt   DateTime  @default(now())
  OTP         OTP[]
  isVerified  Boolean   @default(false)

  Order Order[]

  Cart Cart[]

  Wishlist Wishlist[]
  Review   Review[]
}

// Represents users in the system 
// Relationships
// addresses : a user can have multiple addresses.
// Order : A user can place multiple orders
// Profile : A user has a single profile
// Cart & Wishlist : A user can have multiple cart items and wishlisted products.

model Address {
  id      String @id @default(uuid())
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  street  String
  city    String
  state   String
  zipCode String
  country String
}

// user: Each Address belongs to one user

model OTP {
  id        String   @id @default(uuid()) //Unique identifier
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  otp       String
  expiresAt DateTime
  createdAt DateTime @default(now())
}

// Each user can have only one OTP

model Product {
  id          String   @id @default(uuid())
  name        String
  description String?
  price       Float
  stock       Int
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  OrderItem OrderItem[]

  Cart Cart[]

  Wishlist Wishlist[]
  Review   Review[]
}

model Review {
  id        String   @id @default(uuid())
  // ---
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  // ---
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  // ---
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
}

model Order {
  id     String      @id @default(uuid())
  userId String
  total  Float
  status OrderStatus @default(pending)

  createdAt DateTime @default(now())

  user  User        @relation(fields: [userId], references: [id])
  items OrderItem[]
}

// Relationships
// : user: An order belongs to one user
// : items: Each order contains multiple ordered products

model OrderItem {
  id        String @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  price     Float

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

// order: Belongs to one order,
// product: Each item corresponds to a specific product

model Cart {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Relationships
// user: Each cart entry belongs to one user
//product: Each Cart entry refers to one product

model Wishlist {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
}

// Represents Wishlisted Products
// : Relationships :
// : user: Each Wishlist entry belongs to one user
// : product : Each Wishlist entry corresponds to a product
enum OrderStatus {
  pending
  processing
  shipped
  delivered
  cancelled
}
